def extract_part_number(text):
    """
    Extract part number specifically for standardized format: 7718817C1
    """
    try:
        # Patterns for specific part number format
        patterns = [
            r'STAMP\s+PN\s*["\']?\s*(\d{7}[Cc]\d)\b',  # STAMP PN "7718817C1"
            r'PART\s+NO\.?\s*[:]?\s*(\d{7}[Cc]\d)\b',  # PART NO: 7718817C1
            r'\b(\d{7}[Cc]\d)\b',  # Standalone format
            r'7718817[Cc]1'  # Direct match for specific number
        ]
        
        # Try each pattern in order
        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                part_num = match.group(1).upper()  # Convert 'c' to 'C'
                logging.info(f"Part number found: {part_num}")
                return part_num
        
        # If no match found, try direct string match
        if "7718817C1" in text.upper():
            return "7718817C1"
            
        return "Not Found"
        
    except Exception as e:
        logging.error(f"Error extracting part number: {e}")
        return "Not Found"
        
        # Convert points to coordinate tuples and extract radii
        if isinstance(points, list):
            for point in points:
                try:
                    x = float(point.get('x', 0))
                    y = float(point.get('y', 0))
                    z = float(point.get('z', 0))
                    r = float(point.get('r', 0)) if point.get('r') is not None else 0
                    coordinates.append((x, y, z))
                    radii.append(r)
                except (ValueError, TypeError) as e:
                    logging.warning(f"Invalid coordinate data: {e}")
                    continue
        else:
            # Try to extract coordinates from text
            coord_pattern = r'P\d+\s+(-?\d+\.\d+)\s+(-?\d+\.\d+)\s+(-?\d+\.\d+)'
            matches = re.findall(coord_pattern, str(points))
            
            if matches:
                coordinates = [(float(x), float(y), float(z)) for x, y, z in matches]
                radii = [0] * len(coordinates)  # Default radius of 0 for text-extracted points
        
        if len(coordinates) < 2:
            logging.warning("Insufficient valid coordinates for length calculation")
            return 0
        
        # Calculate total length using path length helper
        total_length = calculate_path_length(coordinates, radii)
        logging.info(f"Calculated development length: {total_length:.2f}mm")
        
        return round(total_length, 2)
            
    except Exception as e:
        logging.error(f"Error calculating development length: {e}")
        return 0
